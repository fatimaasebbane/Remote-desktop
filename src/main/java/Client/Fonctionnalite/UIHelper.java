package Client.Fonctionnalite;

import Client.ClientUI;

import javax.swing.*;
import java.awt.*;
import java.rmi.RemoteException;

public class UIHelper {
    public static String serverPassword;
    private static JPanel contentPane;
    private static JPanel topPanel;
    private static JPanel centerPanel;
    private static JPanel sidebarPanel;
    public static void setupUI(ClientUI clientUI) {

        Dimension localScreenSize = Toolkit.getDefaultToolkit().getScreenSize();

        clientUI.setSize((int) (localScreenSize.getWidth() * 0.8), (int) (localScreenSize.getHeight() * 0.8));
        clientUI.setTitle("AnyDesk");
        clientUI.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        clientUI.setLocationRelativeTo(null);
        clientUI.setLayout(new BorderLayout());

        contentPane = new JPanel(new BorderLayout());
        clientUI.setContentPane(contentPane);

        topPanel = createTopPanel();
        contentPane.add(topPanel, BorderLayout.NORTH);

        centerPanel = createCenterPanel(clientUI);
        contentPane.add(centerPanel, BorderLayout.WEST);

        sidebarPanel = createSidebarPanel();
        contentPane.add(sidebarPanel, BorderLayout.EAST);

        JLabel screenLabel = new JLabel();
        contentPane.add(screenLabel, BorderLayout.CENTER);

        clientUI.screenLabel = screenLabel;
    }

    private static JPanel createTopPanel() {
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel logoLabel = new JLabel(new ImageIcon("logo.png"));
        JLabel appNameLabel = new JLabel("AnyDesk");
        appNameLabel.setFont(new Font("Arial", Font.BOLD, 24));
        topPanel.add(logoLabel);
        topPanel.add(appNameLabel);
        return topPanel;
    }

    private static JPanel createCenterPanel(ClientUI clientUI) {
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BoxLayout(centerPanel, BoxLayout.Y_AXIS));
        JLabel passwordLabel = new JLabel("Enter Service.Server Password:");
        JTextField passwordField = new JTextField(20);
        centerPanel.add(passwordLabel);
        centerPanel.add(passwordField);
        JButton connectButton = new JButton("Connect");
        connectButton.setBackground(new Color(0, 153, 204));
        connectButton.setForeground(Color.WHITE);
        connectButton.setFocusPainted(false);
        connectButton.addActionListener(e -> {
            serverPassword = passwordField.getText();
            try {
                if (!clientUI.checkServerPassword(serverPassword)) {
                    JOptionPane.showMessageDialog(clientUI, "Incorrect server password. Exiting...");
                    System.exit(0);
                } else {
                    clientUI.startScreenRefresh();
                    topPanel.setVisible(false);
                    centerPanel.setVisible(false);
                    sidebarPanel.setVisible(false);
                }
            } catch (RemoteException ex) {
                ex.printStackTrace();
            }
        });
        centerPanel.add(connectButton);
        return centerPanel;
    }

    private static JPanel createSidebarPanel() {
        JPanel sidebarPanel = new JPanel();
        sidebarPanel.setLayout(new BoxLayout(sidebarPanel, BoxLayout.Y_AXIS));
        sidebarPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        sidebarPanel.add(new JLabel("Instructions:"));
        JTextArea instructionsArea = new JTextArea("1. Enter the code generated by the server.\n2. Click 'Connect' to start the remote session.");
        instructionsArea.setEditable(false);
        instructionsArea.setLineWrap(true);
        instructionsArea.setWrapStyleWord(true);
        sidebarPanel.add(new JScrollPane(instructionsArea));
        return sidebarPanel;
    }
}
